// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tendermint/types/events.proto (package tendermint.types, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * @generated from message tendermint.types.EventDataRoundState
 */
export class EventDataRoundState extends Message<EventDataRoundState> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: string step = 3;
   */
  step = "";

  constructor(data?: PartialMessage<EventDataRoundState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.types.EventDataRoundState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "step", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventDataRoundState {
    return new EventDataRoundState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventDataRoundState {
    return new EventDataRoundState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventDataRoundState {
    return new EventDataRoundState().fromJsonString(jsonString, options);
  }

  static equals(a: EventDataRoundState | PlainMessage<EventDataRoundState> | undefined, b: EventDataRoundState | PlainMessage<EventDataRoundState> | undefined): boolean {
    return proto3.util.equals(EventDataRoundState, a, b);
  }
}

