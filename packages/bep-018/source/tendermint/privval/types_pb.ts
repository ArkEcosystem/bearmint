// @generated by protoc-gen-es v0.2.0 with parameter "target=ts"
// @generated from file tendermint/privval/types.proto (package tendermint.privval, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message as Message$1, proto3} from "@bufbuild/protobuf";
import {PublicKey} from "../crypto/keys_pb.js";
import {Proposal, Vote} from "../types/types_pb.js";

/**
 * @generated from enum tendermint.privval.Errors
 */
export enum Errors {
  /**
   * @generated from enum value: ERRORS_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: ERRORS_UNEXPECTED_RESPONSE = 1;
   */
  UNEXPECTED_RESPONSE = 1,

  /**
   * @generated from enum value: ERRORS_NO_CONNECTION = 2;
   */
  NO_CONNECTION = 2,

  /**
   * @generated from enum value: ERRORS_CONNECTION_TIMEOUT = 3;
   */
  CONNECTION_TIMEOUT = 3,

  /**
   * @generated from enum value: ERRORS_READ_TIMEOUT = 4;
   */
  READ_TIMEOUT = 4,

  /**
   * @generated from enum value: ERRORS_WRITE_TIMEOUT = 5;
   */
  WRITE_TIMEOUT = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Errors)
proto3.util.setEnumType(Errors, "tendermint.privval.Errors", [
  { no: 0, name: "ERRORS_UNKNOWN" },
  { no: 1, name: "ERRORS_UNEXPECTED_RESPONSE" },
  { no: 2, name: "ERRORS_NO_CONNECTION" },
  { no: 3, name: "ERRORS_CONNECTION_TIMEOUT" },
  { no: 4, name: "ERRORS_READ_TIMEOUT" },
  { no: 5, name: "ERRORS_WRITE_TIMEOUT" },
]);

/**
 * @generated from message tendermint.privval.RemoteSignerError
 */
export class RemoteSignerError extends Message$1<RemoteSignerError> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  constructor(data?: PartialMessage<RemoteSignerError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.RemoteSignerError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteSignerError {
    return new RemoteSignerError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteSignerError {
    return new RemoteSignerError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteSignerError {
    return new RemoteSignerError().fromJsonString(jsonString, options);
  }

  static equals(a: RemoteSignerError | PlainMessage<RemoteSignerError> | undefined, b: RemoteSignerError | PlainMessage<RemoteSignerError> | undefined): boolean {
    return proto3.util.equals(RemoteSignerError, a, b);
  }
}

/**
 * PubKeyRequest requests the consensus public key from the remote signer.
 *
 * @generated from message tendermint.privval.PubKeyRequest
 */
export class PubKeyRequest extends Message$1<PubKeyRequest> {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  constructor(data?: PartialMessage<PubKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.PubKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubKeyRequest {
    return new PubKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubKeyRequest {
    return new PubKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubKeyRequest {
    return new PubKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PubKeyRequest | PlainMessage<PubKeyRequest> | undefined, b: PubKeyRequest | PlainMessage<PubKeyRequest> | undefined): boolean {
    return proto3.util.equals(PubKeyRequest, a, b);
  }
}

/**
 * PubKeyResponse is a response message containing the public key.
 *
 * @generated from message tendermint.privval.PubKeyResponse
 */
export class PubKeyResponse extends Message$1<PubKeyResponse> {
  /**
   * @generated from field: tendermint.crypto.PublicKey pub_key = 1;
   */
  pubKey?: PublicKey;

  /**
   * @generated from field: tendermint.privval.RemoteSignerError error = 2;
   */
  error?: RemoteSignerError;

  constructor(data?: PartialMessage<PubKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.PubKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pub_key", kind: "message", T: PublicKey },
    { no: 2, name: "error", kind: "message", T: RemoteSignerError },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubKeyResponse {
    return new PubKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubKeyResponse {
    return new PubKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubKeyResponse {
    return new PubKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PubKeyResponse | PlainMessage<PubKeyResponse> | undefined, b: PubKeyResponse | PlainMessage<PubKeyResponse> | undefined): boolean {
    return proto3.util.equals(PubKeyResponse, a, b);
  }
}

/**
 * SignVoteRequest is a request to sign a vote
 *
 * @generated from message tendermint.privval.SignVoteRequest
 */
export class SignVoteRequest extends Message$1<SignVoteRequest> {
  /**
   * @generated from field: tendermint.types.Vote vote = 1;
   */
  vote?: Vote;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId = "";

  constructor(data?: PartialMessage<SignVoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.SignVoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
    { no: 2, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignVoteRequest {
    return new SignVoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignVoteRequest {
    return new SignVoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignVoteRequest {
    return new SignVoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignVoteRequest | PlainMessage<SignVoteRequest> | undefined, b: SignVoteRequest | PlainMessage<SignVoteRequest> | undefined): boolean {
    return proto3.util.equals(SignVoteRequest, a, b);
  }
}

/**
 * SignedVoteResponse is a response containing a signed vote or an error
 *
 * @generated from message tendermint.privval.SignedVoteResponse
 */
export class SignedVoteResponse extends Message$1<SignedVoteResponse> {
  /**
   * @generated from field: tendermint.types.Vote vote = 1;
   */
  vote?: Vote;

  /**
   * @generated from field: tendermint.privval.RemoteSignerError error = 2;
   */
  error?: RemoteSignerError;

  constructor(data?: PartialMessage<SignedVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.SignedVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote },
    { no: 2, name: "error", kind: "message", T: RemoteSignerError },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedVoteResponse {
    return new SignedVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedVoteResponse {
    return new SignedVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedVoteResponse {
    return new SignedVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignedVoteResponse | PlainMessage<SignedVoteResponse> | undefined, b: SignedVoteResponse | PlainMessage<SignedVoteResponse> | undefined): boolean {
    return proto3.util.equals(SignedVoteResponse, a, b);
  }
}

/**
 * SignProposalRequest is a request to sign a proposal
 *
 * @generated from message tendermint.privval.SignProposalRequest
 */
export class SignProposalRequest extends Message$1<SignProposalRequest> {
  /**
   * @generated from field: tendermint.types.Proposal proposal = 1;
   */
  proposal?: Proposal;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId = "";

  constructor(data?: PartialMessage<SignProposalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.SignProposalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
    { no: 2, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignProposalRequest {
    return new SignProposalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignProposalRequest {
    return new SignProposalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignProposalRequest {
    return new SignProposalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignProposalRequest | PlainMessage<SignProposalRequest> | undefined, b: SignProposalRequest | PlainMessage<SignProposalRequest> | undefined): boolean {
    return proto3.util.equals(SignProposalRequest, a, b);
  }
}

/**
 * SignedProposalResponse is response containing a signed proposal or an error
 *
 * @generated from message tendermint.privval.SignedProposalResponse
 */
export class SignedProposalResponse extends Message$1<SignedProposalResponse> {
  /**
   * @generated from field: tendermint.types.Proposal proposal = 1;
   */
  proposal?: Proposal;

  /**
   * @generated from field: tendermint.privval.RemoteSignerError error = 2;
   */
  error?: RemoteSignerError;

  constructor(data?: PartialMessage<SignedProposalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.SignedProposalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal },
    { no: 2, name: "error", kind: "message", T: RemoteSignerError },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedProposalResponse {
    return new SignedProposalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedProposalResponse {
    return new SignedProposalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedProposalResponse {
    return new SignedProposalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignedProposalResponse | PlainMessage<SignedProposalResponse> | undefined, b: SignedProposalResponse | PlainMessage<SignedProposalResponse> | undefined): boolean {
    return proto3.util.equals(SignedProposalResponse, a, b);
  }
}

/**
 * PingRequest is a request to confirm that the connection is alive.
 *
 * @generated from message tendermint.privval.PingRequest
 */
export class PingRequest extends Message$1<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * PingResponse is a response to confirm that the connection is alive.
 *
 * @generated from message tendermint.privval.PingResponse
 */
export class PingResponse extends Message$1<PingResponse> {
  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message tendermint.privval.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from oneof tendermint.privval.Message.sum
   */
  sum: {
    /**
     * @generated from field: tendermint.privval.PubKeyRequest pub_key_request = 1;
     */
    value: PubKeyRequest;
    case: "pubKeyRequest";
  } | {
    /**
     * @generated from field: tendermint.privval.PubKeyResponse pub_key_response = 2;
     */
    value: PubKeyResponse;
    case: "pubKeyResponse";
  } | {
    /**
     * @generated from field: tendermint.privval.SignVoteRequest sign_vote_request = 3;
     */
    value: SignVoteRequest;
    case: "signVoteRequest";
  } | {
    /**
     * @generated from field: tendermint.privval.SignedVoteResponse signed_vote_response = 4;
     */
    value: SignedVoteResponse;
    case: "signedVoteResponse";
  } | {
    /**
     * @generated from field: tendermint.privval.SignProposalRequest sign_proposal_request = 5;
     */
    value: SignProposalRequest;
    case: "signProposalRequest";
  } | {
    /**
     * @generated from field: tendermint.privval.SignedProposalResponse signed_proposal_response = 6;
     */
    value: SignedProposalResponse;
    case: "signedProposalResponse";
  } | {
    /**
     * @generated from field: tendermint.privval.PingRequest ping_request = 7;
     */
    value: PingRequest;
    case: "pingRequest";
  } | {
    /**
     * @generated from field: tendermint.privval.PingResponse ping_response = 8;
     */
    value: PingResponse;
    case: "pingResponse";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.privval.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pub_key_request", kind: "message", T: PubKeyRequest, oneof: "sum" },
    { no: 2, name: "pub_key_response", kind: "message", T: PubKeyResponse, oneof: "sum" },
    { no: 3, name: "sign_vote_request", kind: "message", T: SignVoteRequest, oneof: "sum" },
    { no: 4, name: "signed_vote_response", kind: "message", T: SignedVoteResponse, oneof: "sum" },
    { no: 5, name: "sign_proposal_request", kind: "message", T: SignProposalRequest, oneof: "sum" },
    { no: 6, name: "signed_proposal_response", kind: "message", T: SignedProposalResponse, oneof: "sum" },
    { no: 7, name: "ping_request", kind: "message", T: PingRequest, oneof: "sum" },
    { no: 8, name: "ping_response", kind: "message", T: PingResponse, oneof: "sum" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

