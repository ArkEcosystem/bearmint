// @generated by protoc-gen-es v0.2.0 with parameter "target=ts"
// @generated from file tendermint/consensus/types.proto (package tendermint.consensus, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message as Message$1, proto3, protoInt64} from "@bufbuild/protobuf";
import {BlockID, Part, PartSetHeader, Proposal as Proposal$1, SignedMsgType, Vote as Vote$1} from "../types/types_pb.js";
import {BitArray} from "../libs/bits/types_pb.js";

/**
 * NewRoundStep is sent for every step taken in the ConsensusState.
 * For every height/round/step transition
 *
 * @generated from message tendermint.consensus.NewRoundStep
 */
export class NewRoundStep extends Message$1<NewRoundStep> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: uint32 step = 3;
   */
  step = 0;

  /**
   * @generated from field: int64 seconds_since_start_time = 4;
   */
  secondsSinceStartTime = protoInt64.zero;

  /**
   * @generated from field: int32 last_commit_round = 5;
   */
  lastCommitRound = 0;

  constructor(data?: PartialMessage<NewRoundStep>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.NewRoundStep";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "step", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "seconds_since_start_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "last_commit_round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewRoundStep {
    return new NewRoundStep().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewRoundStep {
    return new NewRoundStep().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewRoundStep {
    return new NewRoundStep().fromJsonString(jsonString, options);
  }

  static equals(a: NewRoundStep | PlainMessage<NewRoundStep> | undefined, b: NewRoundStep | PlainMessage<NewRoundStep> | undefined): boolean {
    return proto3.util.equals(NewRoundStep, a, b);
  }
}

/**
 * NewValidBlock is sent when a validator observes a valid block B in some round r,
 * i.e., there is a Proposal for block B and 2/3+ prevotes for the block B in the round r.
 * In case the block is also committed, then IsCommit flag is set to true.
 *
 * @generated from message tendermint.consensus.NewValidBlock
 */
export class NewValidBlock extends Message$1<NewValidBlock> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: tendermint.types.PartSetHeader block_part_set_header = 3;
   */
  blockPartSetHeader?: PartSetHeader;

  /**
   * @generated from field: tendermint.libs.bits.BitArray block_parts = 4;
   */
  blockParts?: BitArray;

  /**
   * @generated from field: bool is_commit = 5;
   */
  isCommit = false;

  constructor(data?: PartialMessage<NewValidBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.NewValidBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "block_part_set_header", kind: "message", T: PartSetHeader },
    { no: 4, name: "block_parts", kind: "message", T: BitArray },
    { no: 5, name: "is_commit", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewValidBlock {
    return new NewValidBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewValidBlock {
    return new NewValidBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewValidBlock {
    return new NewValidBlock().fromJsonString(jsonString, options);
  }

  static equals(a: NewValidBlock | PlainMessage<NewValidBlock> | undefined, b: NewValidBlock | PlainMessage<NewValidBlock> | undefined): boolean {
    return proto3.util.equals(NewValidBlock, a, b);
  }
}

/**
 * Proposal is sent when a new block is proposed.
 *
 * @generated from message tendermint.consensus.Proposal
 */
export class Proposal extends Message$1<Proposal> {
  /**
   * @generated from field: tendermint.types.Proposal proposal = 1;
   */
  proposal?: Proposal$1;

  constructor(data?: PartialMessage<Proposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.Proposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "proposal", kind: "message", T: Proposal$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proposal {
    return new Proposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proposal {
    return new Proposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proposal {
    return new Proposal().fromJsonString(jsonString, options);
  }

  static equals(a: Proposal | PlainMessage<Proposal> | undefined, b: Proposal | PlainMessage<Proposal> | undefined): boolean {
    return proto3.util.equals(Proposal, a, b);
  }
}

/**
 * ProposalPOL is sent when a previous proposal is re-proposed.
 *
 * @generated from message tendermint.consensus.ProposalPOL
 */
export class ProposalPOL extends Message$1<ProposalPOL> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 proposal_pol_round = 2;
   */
  proposalPolRound = 0;

  /**
   * @generated from field: tendermint.libs.bits.BitArray proposal_pol = 3;
   */
  proposalPol?: BitArray;

  constructor(data?: PartialMessage<ProposalPOL>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.ProposalPOL";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "proposal_pol_round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "proposal_pol", kind: "message", T: BitArray },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalPOL {
    return new ProposalPOL().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalPOL {
    return new ProposalPOL().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalPOL {
    return new ProposalPOL().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalPOL | PlainMessage<ProposalPOL> | undefined, b: ProposalPOL | PlainMessage<ProposalPOL> | undefined): boolean {
    return proto3.util.equals(ProposalPOL, a, b);
  }
}

/**
 * BlockPart is sent when gossipping a piece of the proposed block.
 *
 * @generated from message tendermint.consensus.BlockPart
 */
export class BlockPart extends Message$1<BlockPart> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: tendermint.types.Part part = 3;
   */
  part?: Part;

  constructor(data?: PartialMessage<BlockPart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.BlockPart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "part", kind: "message", T: Part },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockPart {
    return new BlockPart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockPart {
    return new BlockPart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockPart {
    return new BlockPart().fromJsonString(jsonString, options);
  }

  static equals(a: BlockPart | PlainMessage<BlockPart> | undefined, b: BlockPart | PlainMessage<BlockPart> | undefined): boolean {
    return proto3.util.equals(BlockPart, a, b);
  }
}

/**
 * Vote is sent when voting for a proposal (or lack thereof).
 *
 * @generated from message tendermint.consensus.Vote
 */
export class Vote extends Message$1<Vote> {
  /**
   * @generated from field: tendermint.types.Vote vote = 1;
   */
  vote?: Vote$1;

  constructor(data?: PartialMessage<Vote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.Vote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote", kind: "message", T: Vote$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vote {
    return new Vote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vote {
    return new Vote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vote {
    return new Vote().fromJsonString(jsonString, options);
  }

  static equals(a: Vote | PlainMessage<Vote> | undefined, b: Vote | PlainMessage<Vote> | undefined): boolean {
    return proto3.util.equals(Vote, a, b);
  }
}

/**
 * HasVote is sent to indicate that a particular vote has been received.
 *
 * @generated from message tendermint.consensus.HasVote
 */
export class HasVote extends Message$1<HasVote> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: tendermint.types.SignedMsgType type = 3;
   */
  type = SignedMsgType.UNKNOWN;

  /**
   * @generated from field: int32 index = 4;
   */
  index = 0;

  constructor(data?: PartialMessage<HasVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.HasVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 4, name: "index", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasVote {
    return new HasVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasVote {
    return new HasVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasVote {
    return new HasVote().fromJsonString(jsonString, options);
  }

  static equals(a: HasVote | PlainMessage<HasVote> | undefined, b: HasVote | PlainMessage<HasVote> | undefined): boolean {
    return proto3.util.equals(HasVote, a, b);
  }
}

/**
 * VoteSetMaj23 is sent to indicate that a given BlockID has seen +2/3 votes.
 *
 * @generated from message tendermint.consensus.VoteSetMaj23
 */
export class VoteSetMaj23 extends Message$1<VoteSetMaj23> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: tendermint.types.SignedMsgType type = 3;
   */
  type = SignedMsgType.UNKNOWN;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 4;
   */
  blockId?: BlockID;

  constructor(data?: PartialMessage<VoteSetMaj23>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.VoteSetMaj23";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 4, name: "block_id", kind: "message", T: BlockID },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteSetMaj23 {
    return new VoteSetMaj23().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteSetMaj23 {
    return new VoteSetMaj23().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteSetMaj23 {
    return new VoteSetMaj23().fromJsonString(jsonString, options);
  }

  static equals(a: VoteSetMaj23 | PlainMessage<VoteSetMaj23> | undefined, b: VoteSetMaj23 | PlainMessage<VoteSetMaj23> | undefined): boolean {
    return proto3.util.equals(VoteSetMaj23, a, b);
  }
}

/**
 * VoteSetBits is sent to communicate the bit-array of votes seen for the BlockID.
 *
 * @generated from message tendermint.consensus.VoteSetBits
 */
export class VoteSetBits extends Message$1<VoteSetBits> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 2;
   */
  round = 0;

  /**
   * @generated from field: tendermint.types.SignedMsgType type = 3;
   */
  type = SignedMsgType.UNKNOWN;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 4;
   */
  blockId?: BlockID;

  /**
   * @generated from field: tendermint.libs.bits.BitArray votes = 5;
   */
  votes?: BitArray;

  constructor(data?: PartialMessage<VoteSetBits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.VoteSetBits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 4, name: "block_id", kind: "message", T: BlockID },
    { no: 5, name: "votes", kind: "message", T: BitArray },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteSetBits {
    return new VoteSetBits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteSetBits {
    return new VoteSetBits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteSetBits {
    return new VoteSetBits().fromJsonString(jsonString, options);
  }

  static equals(a: VoteSetBits | PlainMessage<VoteSetBits> | undefined, b: VoteSetBits | PlainMessage<VoteSetBits> | undefined): boolean {
    return proto3.util.equals(VoteSetBits, a, b);
  }
}

/**
 * @generated from message tendermint.consensus.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from oneof tendermint.consensus.Message.sum
   */
  sum: {
    /**
     * @generated from field: tendermint.consensus.NewRoundStep new_round_step = 1;
     */
    value: NewRoundStep;
    case: "newRoundStep";
  } | {
    /**
     * @generated from field: tendermint.consensus.NewValidBlock new_valid_block = 2;
     */
    value: NewValidBlock;
    case: "newValidBlock";
  } | {
    /**
     * @generated from field: tendermint.consensus.Proposal proposal = 3;
     */
    value: Proposal;
    case: "proposal";
  } | {
    /**
     * @generated from field: tendermint.consensus.ProposalPOL proposal_pol = 4;
     */
    value: ProposalPOL;
    case: "proposalPol";
  } | {
    /**
     * @generated from field: tendermint.consensus.BlockPart block_part = 5;
     */
    value: BlockPart;
    case: "blockPart";
  } | {
    /**
     * @generated from field: tendermint.consensus.Vote vote = 6;
     */
    value: Vote;
    case: "vote";
  } | {
    /**
     * @generated from field: tendermint.consensus.HasVote has_vote = 7;
     */
    value: HasVote;
    case: "hasVote";
  } | {
    /**
     * @generated from field: tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
     */
    value: VoteSetMaj23;
    case: "voteSetMaj23";
  } | {
    /**
     * @generated from field: tendermint.consensus.VoteSetBits vote_set_bits = 9;
     */
    value: VoteSetBits;
    case: "voteSetBits";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_round_step", kind: "message", T: NewRoundStep, oneof: "sum" },
    { no: 2, name: "new_valid_block", kind: "message", T: NewValidBlock, oneof: "sum" },
    { no: 3, name: "proposal", kind: "message", T: Proposal, oneof: "sum" },
    { no: 4, name: "proposal_pol", kind: "message", T: ProposalPOL, oneof: "sum" },
    { no: 5, name: "block_part", kind: "message", T: BlockPart, oneof: "sum" },
    { no: 6, name: "vote", kind: "message", T: Vote, oneof: "sum" },
    { no: 7, name: "has_vote", kind: "message", T: HasVote, oneof: "sum" },
    { no: 8, name: "vote_set_maj23", kind: "message", T: VoteSetMaj23, oneof: "sum" },
    { no: 9, name: "vote_set_bits", kind: "message", T: VoteSetBits, oneof: "sum" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

