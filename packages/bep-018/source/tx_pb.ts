// @generated by protoc-gen-es v0.2.0 with parameter "target=ts"
// @generated from file tx.proto (syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64, Struct} from "@bufbuild/protobuf";

/**
 * Basics
 *
 * @generated from message TxChecksum
 */
export class TxChecksum extends Message<TxChecksum> {
  /**
   * @generated from field: string handler = 1;
   */
  handler = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string network = 3;
   */
  network = "";

  constructor(data?: PartialMessage<TxChecksum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "TxChecksum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handler", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxChecksum {
    return new TxChecksum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxChecksum {
    return new TxChecksum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxChecksum {
    return new TxChecksum().fromJsonString(jsonString, options);
  }

  static equals(a: TxChecksum | PlainMessage<TxChecksum> | undefined, b: TxChecksum | PlainMessage<TxChecksum> | undefined): boolean {
    return proto3.util.equals(TxChecksum, a, b);
  }
}

/**
 * @generated from message TxMsg
 */
export class TxMsg extends Message<TxMsg> {
  /**
   * @generated from field: string handler = 1;
   */
  handler = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string network = 3;
   */
  network = "";

  /**
   * @generated from field: bytes content = 4;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<TxMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "TxMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handler", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxMsg {
    return new TxMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxMsg {
    return new TxMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxMsg {
    return new TxMsg().fromJsonString(jsonString, options);
  }

  static equals(a: TxMsg | PlainMessage<TxMsg> | undefined, b: TxMsg | PlainMessage<TxMsg> | undefined): boolean {
    return proto3.util.equals(TxMsg, a, b);
  }
}

/**
 * @generated from message TxBody
 */
export class TxBody extends Message<TxBody> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string recipient = 3;
   */
  recipient = "";

  /**
   * @generated from field: uint64 nonce = 4;
   */
  nonce = protoInt64.zero;

  /**
   * @generated from field: uint64 gas = 5;
   */
  gas = protoInt64.zero;

  /**
   * @generated from field: TxMsg message = 6;
   */
  message?: TxMsg;

  constructor(data?: PartialMessage<TxBody>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "TxBody";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "message", kind: "message", T: TxMsg },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxBody {
    return new TxBody().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxBody {
    return new TxBody().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxBody {
    return new TxBody().fromJsonString(jsonString, options);
  }

  static equals(a: TxBody | PlainMessage<TxBody> | undefined, b: TxBody | PlainMessage<TxBody> | undefined): boolean {
    return proto3.util.equals(TxBody, a, b);
  }
}

/**
 * @generated from message SignedTx
 */
export class SignedTx extends Message<SignedTx> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string sender = 2;
   */
  sender = "";

  /**
   * @generated from field: string recipient = 3;
   */
  recipient = "";

  /**
   * @generated from field: uint64 nonce = 4;
   */
  nonce = protoInt64.zero;

  /**
   * @generated from field: uint64 gas = 5;
   */
  gas = protoInt64.zero;

  /**
   * @generated from field: TxMsg message = 6;
   */
  message?: TxMsg;

  /**
   * @generated from field: bytes signature = 7;
   */
  signature = new Uint8Array(0);

  constructor(data?: PartialMessage<SignedTx>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "SignedTx";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "gas", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "message", kind: "message", T: TxMsg },
    { no: 7, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignedTx {
    return new SignedTx().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignedTx {
    return new SignedTx().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignedTx {
    return new SignedTx().fromJsonString(jsonString, options);
  }

  static equals(a: SignedTx | PlainMessage<SignedTx> | undefined, b: SignedTx | PlainMessage<SignedTx> | undefined): boolean {
    return proto3.util.equals(SignedTx, a, b);
  }
}

/**
 * @generated from message TxReceipt
 */
export class TxReceipt extends Message<TxReceipt> {
  /**
   * @generated from field: bytes block_hash = 1;
   */
  blockHash = new Uint8Array(0);

  /**
   * @generated from field: uint64 block_number = 2;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: repeated TxReceiptLog logs = 3;
   */
  logs: TxReceiptLog[] = [];

  constructor(data?: PartialMessage<TxReceipt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "TxReceipt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "logs", kind: "message", T: TxReceiptLog, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxReceipt {
    return new TxReceipt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxReceipt {
    return new TxReceipt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxReceipt {
    return new TxReceipt().fromJsonString(jsonString, options);
  }

  static equals(a: TxReceipt | PlainMessage<TxReceipt> | undefined, b: TxReceipt | PlainMessage<TxReceipt> | undefined): boolean {
    return proto3.util.equals(TxReceipt, a, b);
  }
}

/**
 * @generated from message TxReceiptLog
 */
export class TxReceiptLog extends Message<TxReceiptLog> {
  /**
   * @generated from field: string event = 1;
   */
  event = "";

  /**
   * @generated from field: google.protobuf.Struct args = 2;
   */
  args?: Struct;

  constructor(data?: PartialMessage<TxReceiptLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "TxReceiptLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TxReceiptLog {
    return new TxReceiptLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TxReceiptLog {
    return new TxReceiptLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TxReceiptLog {
    return new TxReceiptLog().fromJsonString(jsonString, options);
  }

  static equals(a: TxReceiptLog | PlainMessage<TxReceiptLog> | undefined, b: TxReceiptLog | PlainMessage<TxReceiptLog> | undefined): boolean {
    return proto3.util.equals(TxReceiptLog, a, b);
  }
}

/**
 * Token Transfer Tx
 *
 * @generated from message BEP55MsgOp
 */
export class BEP55MsgOp extends Message<BEP55MsgOp> {
  /**
   * @generated from field: string denomination = 1;
   */
  denomination = "";

  /**
   * @generated from field: uint64 amount = 2;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string recipient = 3;
   */
  recipient = "";

  /**
   * @generated from field: optional string memo = 4;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP55MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP55MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denomination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP55MsgOp {
    return new BEP55MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP55MsgOp {
    return new BEP55MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP55MsgOp {
    return new BEP55MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP55MsgOp | PlainMessage<BEP55MsgOp> | undefined, b: BEP55MsgOp | PlainMessage<BEP55MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP55MsgOp, a, b);
  }
}

/**
 * @generated from message BEP55Msg
 */
export class BEP55Msg extends Message<BEP55Msg> {
  /**
   * @generated from field: repeated BEP55MsgOp ops = 1;
   */
  ops: BEP55MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP55Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP55Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP55MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP55Msg {
    return new BEP55Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP55Msg {
    return new BEP55Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP55Msg {
    return new BEP55Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP55Msg | PlainMessage<BEP55Msg> | undefined, b: BEP55Msg | PlainMessage<BEP55Msg> | undefined): boolean {
    return proto3.util.equals(BEP55Msg, a, b);
  }
}

/**
 * Token Burn Tx
 *
 * @generated from message BEP56MsgOp
 */
export class BEP56MsgOp extends Message<BEP56MsgOp> {
  /**
   * @generated from field: string denomination = 1;
   */
  denomination = "";

  /**
   * @generated from field: uint64 amount = 2;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP56MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP56MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denomination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP56MsgOp {
    return new BEP56MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP56MsgOp {
    return new BEP56MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP56MsgOp {
    return new BEP56MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP56MsgOp | PlainMessage<BEP56MsgOp> | undefined, b: BEP56MsgOp | PlainMessage<BEP56MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP56MsgOp, a, b);
  }
}

/**
 * @generated from message BEP56Msg
 */
export class BEP56Msg extends Message<BEP56Msg> {
  /**
   * @generated from field: repeated BEP56MsgOp ops = 1;
   */
  ops: BEP56MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP56Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP56Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP56MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP56Msg {
    return new BEP56Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP56Msg {
    return new BEP56Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP56Msg {
    return new BEP56Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP56Msg | PlainMessage<BEP56Msg> | undefined, b: BEP56Msg | PlainMessage<BEP56Msg> | undefined): boolean {
    return proto3.util.equals(BEP56Msg, a, b);
  }
}

/**
 * Validation Registration Tx
 *
 * @generated from message BEP57Msg
 */
export class BEP57Msg extends Message<BEP57Msg> {
  /**
   * @generated from field: bytes public_key = 1;
   */
  publicKey = new Uint8Array(0);

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP57Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP57Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP57Msg {
    return new BEP57Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP57Msg {
    return new BEP57Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP57Msg {
    return new BEP57Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP57Msg | PlainMessage<BEP57Msg> | undefined, b: BEP57Msg | PlainMessage<BEP57Msg> | undefined): boolean {
    return proto3.util.equals(BEP57Msg, a, b);
  }
}

/**
 * @generated from message BEP57MsgHash
 */
export class BEP57MsgHash extends Message<BEP57MsgHash> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP57MsgHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP57MsgHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP57MsgHash {
    return new BEP57MsgHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP57MsgHash {
    return new BEP57MsgHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP57MsgHash {
    return new BEP57MsgHash().fromJsonString(jsonString, options);
  }

  static equals(a: BEP57MsgHash | PlainMessage<BEP57MsgHash> | undefined, b: BEP57MsgHash | PlainMessage<BEP57MsgHash> | undefined): boolean {
    return proto3.util.equals(BEP57MsgHash, a, b);
  }
}

/**
 * Validator Resignation Tx
 *
 * @generated from message BEP58Msg
 */
export class BEP58Msg extends Message<BEP58Msg> {
  /**
   * @generated from field: bytes signature = 1;
   */
  signature = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP58Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP58Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP58Msg {
    return new BEP58Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP58Msg {
    return new BEP58Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP58Msg {
    return new BEP58Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP58Msg | PlainMessage<BEP58Msg> | undefined, b: BEP58Msg | PlainMessage<BEP58Msg> | undefined): boolean {
    return proto3.util.equals(BEP58Msg, a, b);
  }
}

/**
 * @generated from message BEP58MsgHash
 */
export class BEP58MsgHash extends Message<BEP58MsgHash> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP58MsgHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP58MsgHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP58MsgHash {
    return new BEP58MsgHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP58MsgHash {
    return new BEP58MsgHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP58MsgHash {
    return new BEP58MsgHash().fromJsonString(jsonString, options);
  }

  static equals(a: BEP58MsgHash | PlainMessage<BEP58MsgHash> | undefined, b: BEP58MsgHash | PlainMessage<BEP58MsgHash> | undefined): boolean {
    return proto3.util.equals(BEP58MsgHash, a, b);
  }
}

/**
 * Validator Distribution Tx
 *
 * @generated from message BEP59Msg
 */
export class BEP59Msg extends Message<BEP59Msg> {
  /**
   * @generated from field: string strategy = 1;
   */
  strategy = "";

  /**
   * @generated from field: string strategy_args = 2;
   */
  strategyArgs = "";

  /**
   * @generated from field: bytes signature = 3;
   */
  signature = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 4;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP59Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP59Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strategy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "strategy_args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP59Msg {
    return new BEP59Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP59Msg {
    return new BEP59Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP59Msg {
    return new BEP59Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP59Msg | PlainMessage<BEP59Msg> | undefined, b: BEP59Msg | PlainMessage<BEP59Msg> | undefined): boolean {
    return proto3.util.equals(BEP59Msg, a, b);
  }
}

/**
 * @generated from message BEP59MsgHash
 */
export class BEP59MsgHash extends Message<BEP59MsgHash> {
  /**
   * @generated from field: string strategy = 1;
   */
  strategy = "";

  /**
   * @generated from field: string strategy_args = 2;
   */
  strategyArgs = "";

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP59MsgHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP59MsgHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strategy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "strategy_args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP59MsgHash {
    return new BEP59MsgHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP59MsgHash {
    return new BEP59MsgHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP59MsgHash {
    return new BEP59MsgHash().fromJsonString(jsonString, options);
  }

  static equals(a: BEP59MsgHash | PlainMessage<BEP59MsgHash> | undefined, b: BEP59MsgHash | PlainMessage<BEP59MsgHash> | undefined): boolean {
    return proto3.util.equals(BEP59MsgHash, a, b);
  }
}

/**
 * @generated from message BEP59Strategy
 */
export class BEP59Strategy extends Message<BEP59Strategy> {
  /**
   * @generated from field: string strategy = 1;
   */
  strategy = "";

  /**
   * @generated from field: string strategy_args = 2;
   */
  strategyArgs = "";

  constructor(data?: PartialMessage<BEP59Strategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP59Strategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strategy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "strategy_args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP59Strategy {
    return new BEP59Strategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP59Strategy {
    return new BEP59Strategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP59Strategy {
    return new BEP59Strategy().fromJsonString(jsonString, options);
  }

  static equals(a: BEP59Strategy | PlainMessage<BEP59Strategy> | undefined, b: BEP59Strategy | PlainMessage<BEP59Strategy> | undefined): boolean {
    return proto3.util.equals(BEP59Strategy, a, b);
  }
}

/**
 * HTLC Lock Tx
 *
 * @generated from message BEP64MsgOp
 */
export class BEP64MsgOp extends Message<BEP64MsgOp> {
  /**
   * @generated from field: bytes secret = 1;
   */
  secret = new Uint8Array(0);

  /**
   * @generated from field: string secret_algorithm = 2;
   */
  secretAlgorithm = "";

  /**
   * @generated from field: uint64 expiration = 3;
   */
  expiration = protoInt64.zero;

  /**
   * @generated from field: string denomination = 4;
   */
  denomination = "";

  /**
   * @generated from field: uint64 amount = 5;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string recipient = 6;
   */
  recipient = "";

  /**
   * @generated from field: optional string memo = 7;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP64MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP64MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "secret_algorithm", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiration", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "denomination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP64MsgOp {
    return new BEP64MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP64MsgOp {
    return new BEP64MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP64MsgOp {
    return new BEP64MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP64MsgOp | PlainMessage<BEP64MsgOp> | undefined, b: BEP64MsgOp | PlainMessage<BEP64MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP64MsgOp, a, b);
  }
}

/**
 * @generated from message BEP64Msg
 */
export class BEP64Msg extends Message<BEP64Msg> {
  /**
   * @generated from field: repeated BEP64MsgOp ops = 1;
   */
  ops: BEP64MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP64Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP64Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP64MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP64Msg {
    return new BEP64Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP64Msg {
    return new BEP64Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP64Msg {
    return new BEP64Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP64Msg | PlainMessage<BEP64Msg> | undefined, b: BEP64Msg | PlainMessage<BEP64Msg> | undefined): boolean {
    return proto3.util.equals(BEP64Msg, a, b);
  }
}

/**
 * @generated from message BEP64Lock
 */
export class BEP64Lock extends Message<BEP64Lock> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: uint32 index = 2;
   */
  index = 0;

  constructor(data?: PartialMessage<BEP64Lock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP64Lock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP64Lock {
    return new BEP64Lock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP64Lock {
    return new BEP64Lock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP64Lock {
    return new BEP64Lock().fromJsonString(jsonString, options);
  }

  static equals(a: BEP64Lock | PlainMessage<BEP64Lock> | undefined, b: BEP64Lock | PlainMessage<BEP64Lock> | undefined): boolean {
    return proto3.util.equals(BEP64Lock, a, b);
  }
}

/**
 * HTLC Claim Tx
 *
 * @generated from message BEP65MsgOp
 */
export class BEP65MsgOp extends Message<BEP65MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: bytes secret = 2;
   */
  secret = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP65MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP65MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP65MsgOp {
    return new BEP65MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP65MsgOp {
    return new BEP65MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP65MsgOp {
    return new BEP65MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP65MsgOp | PlainMessage<BEP65MsgOp> | undefined, b: BEP65MsgOp | PlainMessage<BEP65MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP65MsgOp, a, b);
  }
}

/**
 * @generated from message BEP65Msg
 */
export class BEP65Msg extends Message<BEP65Msg> {
  /**
   * @generated from field: repeated BEP65MsgOp ops = 1;
   */
  ops: BEP65MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP65Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP65Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP65MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP65Msg {
    return new BEP65Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP65Msg {
    return new BEP65Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP65Msg {
    return new BEP65Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP65Msg | PlainMessage<BEP65Msg> | undefined, b: BEP65Msg | PlainMessage<BEP65Msg> | undefined): boolean {
    return proto3.util.equals(BEP65Msg, a, b);
  }
}

/**
 * HTLC Refund Tx
 *
 * @generated from message BEP66MsgOp
 */
export class BEP66MsgOp extends Message<BEP66MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: bytes secret = 2;
   */
  secret = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP66MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP66MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "secret", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP66MsgOp {
    return new BEP66MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP66MsgOp {
    return new BEP66MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP66MsgOp {
    return new BEP66MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP66MsgOp | PlainMessage<BEP66MsgOp> | undefined, b: BEP66MsgOp | PlainMessage<BEP66MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP66MsgOp, a, b);
  }
}

/**
 * @generated from message BEP66Msg
 */
export class BEP66Msg extends Message<BEP66Msg> {
  /**
   * @generated from field: repeated BEP66MsgOp ops = 1;
   */
  ops: BEP66MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP66Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP66Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP66MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP66Msg {
    return new BEP66Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP66Msg {
    return new BEP66Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP66Msg {
    return new BEP66Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP66Msg | PlainMessage<BEP66Msg> | undefined, b: BEP66Msg | PlainMessage<BEP66Msg> | undefined): boolean {
    return proto3.util.equals(BEP66Msg, a, b);
  }
}

/**
 * IPFS Tx
 *
 * @generated from message BEP67MsgOp
 */
export class BEP67MsgOp extends Message<BEP67MsgOp> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP67MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP67MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP67MsgOp {
    return new BEP67MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP67MsgOp {
    return new BEP67MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP67MsgOp {
    return new BEP67MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP67MsgOp | PlainMessage<BEP67MsgOp> | undefined, b: BEP67MsgOp | PlainMessage<BEP67MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP67MsgOp, a, b);
  }
}

/**
 * @generated from message BEP67Msg
 */
export class BEP67Msg extends Message<BEP67Msg> {
  /**
   * @generated from field: repeated BEP67MsgOp ops = 1;
   */
  ops: BEP67MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP67Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP67Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP67MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP67Msg {
    return new BEP67Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP67Msg {
    return new BEP67Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP67Msg {
    return new BEP67Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP67Msg | PlainMessage<BEP67Msg> | undefined, b: BEP67Msg | PlainMessage<BEP67Msg> | undefined): boolean {
    return proto3.util.equals(BEP67Msg, a, b);
  }
}

/**
 * Blob Registration Tx
 *
 * @generated from message BEP68MsgOp
 */
export class BEP68MsgOp extends Message<BEP68MsgOp> {
  /**
   * @generated from field: string mime_type = 1;
   */
  mimeType = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP68MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP68MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP68MsgOp {
    return new BEP68MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP68MsgOp {
    return new BEP68MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP68MsgOp {
    return new BEP68MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP68MsgOp | PlainMessage<BEP68MsgOp> | undefined, b: BEP68MsgOp | PlainMessage<BEP68MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP68MsgOp, a, b);
  }
}

/**
 * @generated from message BEP68Msg
 */
export class BEP68Msg extends Message<BEP68Msg> {
  /**
   * @generated from field: repeated BEP68MsgOp ops = 1;
   */
  ops: BEP68MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP68Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP68Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP68MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP68Msg {
    return new BEP68Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP68Msg {
    return new BEP68Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP68Msg {
    return new BEP68Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP68Msg | PlainMessage<BEP68Msg> | undefined, b: BEP68Msg | PlainMessage<BEP68Msg> | undefined): boolean {
    return proto3.util.equals(BEP68Msg, a, b);
  }
}

/**
 * Stake Tx
 *
 * @generated from message BEP104MsgOp
 */
export class BEP104MsgOp extends Message<BEP104MsgOp> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * @generated from field: int64 stake = 2;
   */
  stake = protoInt64.zero;

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP104MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP104MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stake", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP104MsgOp {
    return new BEP104MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP104MsgOp {
    return new BEP104MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP104MsgOp {
    return new BEP104MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP104MsgOp | PlainMessage<BEP104MsgOp> | undefined, b: BEP104MsgOp | PlainMessage<BEP104MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP104MsgOp, a, b);
  }
}

/**
 * @generated from message BEP104Msg
 */
export class BEP104Msg extends Message<BEP104Msg> {
  /**
   * @generated from field: repeated BEP104MsgOp ops = 1;
   */
  ops: BEP104MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP104Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP104Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP104MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP104Msg {
    return new BEP104Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP104Msg {
    return new BEP104Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP104Msg {
    return new BEP104Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP104Msg | PlainMessage<BEP104Msg> | undefined, b: BEP104Msg | PlainMessage<BEP104Msg> | undefined): boolean {
    return proto3.util.equals(BEP104Msg, a, b);
  }
}

/**
 * Name Registration Tx
 *
 * @generated from message BEP110Msg
 */
export class BEP110Msg extends Message<BEP110Msg> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP110Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP110Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP110Msg {
    return new BEP110Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP110Msg {
    return new BEP110Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP110Msg {
    return new BEP110Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP110Msg | PlainMessage<BEP110Msg> | undefined, b: BEP110Msg | PlainMessage<BEP110Msg> | undefined): boolean {
    return proto3.util.equals(BEP110Msg, a, b);
  }
}

/**
 * Validator "Release from Jail" Tx
 *
 * @generated from message BEP122Msg
 */
export class BEP122Msg extends Message<BEP122Msg> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0);

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP122Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP122Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP122Msg {
    return new BEP122Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP122Msg {
    return new BEP122Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP122Msg {
    return new BEP122Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP122Msg | PlainMessage<BEP122Msg> | undefined, b: BEP122Msg | PlainMessage<BEP122Msg> | undefined): boolean {
    return proto3.util.equals(BEP122Msg, a, b);
  }
}

/**
 * @generated from message BEP122MsgHash
 */
export class BEP122MsgHash extends Message<BEP122MsgHash> {
  /**
   * @generated from field: string moniker = 1;
   */
  moniker = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP122MsgHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP122MsgHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "moniker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP122MsgHash {
    return new BEP122MsgHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP122MsgHash {
    return new BEP122MsgHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP122MsgHash {
    return new BEP122MsgHash().fromJsonString(jsonString, options);
  }

  static equals(a: BEP122MsgHash | PlainMessage<BEP122MsgHash> | undefined, b: BEP122MsgHash | PlainMessage<BEP122MsgHash> | undefined): boolean {
    return proto3.util.equals(BEP122MsgHash, a, b);
  }
}

/**
 * NFT Collection Registration Tx
 *
 * @generated from message BEP126User
 */
export class BEP126User extends Message<BEP126User> {
  /**
   * @generated from field: uint32 role = 1;
   */
  role = 0;

  /**
   * @generated from field: repeated uint32 permissions = 2;
   */
  permissions: number[] = [];

  constructor(data?: PartialMessage<BEP126User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP126User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "permissions", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP126User {
    return new BEP126User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP126User {
    return new BEP126User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP126User {
    return new BEP126User().fromJsonString(jsonString, options);
  }

  static equals(a: BEP126User | PlainMessage<BEP126User> | undefined, b: BEP126User | PlainMessage<BEP126User> | undefined): boolean {
    return proto3.util.equals(BEP126User, a, b);
  }
}

/**
 * @generated from message BEP126Policy
 */
export class BEP126Policy extends Message<BEP126Policy> {
  /**
   * @generated from field: uint32 type = 1;
   */
  type = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string args = 3;
   */
  args = "";

  constructor(data?: PartialMessage<BEP126Policy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP126Policy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP126Policy {
    return new BEP126Policy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP126Policy {
    return new BEP126Policy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP126Policy {
    return new BEP126Policy().fromJsonString(jsonString, options);
  }

  static equals(a: BEP126Policy | PlainMessage<BEP126Policy> | undefined, b: BEP126Policy | PlainMessage<BEP126Policy> | undefined): boolean {
    return proto3.util.equals(BEP126Policy, a, b);
  }
}

/**
 * @generated from message BEP126Collection
 */
export class BEP126Collection extends Message<BEP126Collection> {
  /**
   * The id of this collection (computed from `addr.txHash.idx`)
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The name of this collection (e.g. Bored Ape Yacht Club)
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The symbol of this collection (e.g. BAYC)
   *
   * @generated from field: string symbol = 3;
   */
  symbol = "";

  /**
   * The prefix for the metadata URI of NFTs in this collection
   *
   * @generated from field: string uri_prefix = 4;
   */
  uriPrefix = "";

  /**
   * The suffix for the metadata URI of NFTs in this collection
   *
   * @generated from field: string uri_suffix = 5;
   */
  uriSuffix = "";

  /**
   * The NFTs in this collection (<tokenId, owner>)
   *
   * @generated from field: repeated string tokens = 6;
   */
  tokens: string[] = [];

  /**
   * The initial owner of this collection
   *
   * @generated from field: string initial_owner = 7;
   */
  initialOwner = "";

  /**
   * The current owner of this collection
   *
   * @generated from field: string current_owner = 8;
   */
  currentOwner = "";

  /**
   * The ACL (Access Control List) for users of this collection
   *
   * @generated from field: map<string, BEP126User> access_control_list = 9;
   */
  accessControlList: { [key: string]: BEP126User } = {};

  /**
   * The policies that enforce authorisation restrictions of this collection.
   *
   * @generated from field: repeated BEP126Policy policies = 10;
   */
  policies: BEP126Policy[] = [];

  constructor(data?: PartialMessage<BEP126Collection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP126Collection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uri_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "uri_suffix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tokens", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "initial_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "current_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "access_control_list", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BEP126User} },
    { no: 10, name: "policies", kind: "message", T: BEP126Policy, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP126Collection {
    return new BEP126Collection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP126Collection {
    return new BEP126Collection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP126Collection {
    return new BEP126Collection().fromJsonString(jsonString, options);
  }

  static equals(a: BEP126Collection | PlainMessage<BEP126Collection> | undefined, b: BEP126Collection | PlainMessage<BEP126Collection> | undefined): boolean {
    return proto3.util.equals(BEP126Collection, a, b);
  }
}

/**
 * @generated from message BEP126MsgOp
 */
export class BEP126MsgOp extends Message<BEP126MsgOp> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  /**
   * @generated from field: string uri_prefix = 3;
   */
  uriPrefix = "";

  /**
   * @generated from field: string uri_suffix = 4;
   */
  uriSuffix = "";

  /**
   * @generated from field: repeated BEP126Policy policies = 5;
   */
  policies: BEP126Policy[] = [];

  /**
   * @generated from field: optional string memo = 6;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP126MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP126MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uri_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "uri_suffix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "policies", kind: "message", T: BEP126Policy, repeated: true },
    { no: 6, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP126MsgOp {
    return new BEP126MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP126MsgOp {
    return new BEP126MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP126MsgOp {
    return new BEP126MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP126MsgOp | PlainMessage<BEP126MsgOp> | undefined, b: BEP126MsgOp | PlainMessage<BEP126MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP126MsgOp, a, b);
  }
}

/**
 * @generated from message BEP126Msg
 */
export class BEP126Msg extends Message<BEP126Msg> {
  /**
   * @generated from field: repeated BEP126MsgOp ops = 1;
   */
  ops: BEP126MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP126Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP126Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP126MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP126Msg {
    return new BEP126Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP126Msg {
    return new BEP126Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP126Msg {
    return new BEP126Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP126Msg | PlainMessage<BEP126Msg> | undefined, b: BEP126Msg | PlainMessage<BEP126Msg> | undefined): boolean {
    return proto3.util.equals(BEP126Msg, a, b);
  }
}

/**
 * NFT Collection Ownership Transfer Tx
 *
 * @generated from message BEP127MsgOp
 */
export class BEP127MsgOp extends Message<BEP127MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP127MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP127MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP127MsgOp {
    return new BEP127MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP127MsgOp {
    return new BEP127MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP127MsgOp {
    return new BEP127MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP127MsgOp | PlainMessage<BEP127MsgOp> | undefined, b: BEP127MsgOp | PlainMessage<BEP127MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP127MsgOp, a, b);
  }
}

/**
 * @generated from message BEP127Msg
 */
export class BEP127Msg extends Message<BEP127Msg> {
  /**
   * @generated from field: repeated BEP127MsgOp ops = 1;
   */
  ops: BEP127MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP127Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP127Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP127MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP127Msg {
    return new BEP127Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP127Msg {
    return new BEP127Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP127Msg {
    return new BEP127Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP127Msg | PlainMessage<BEP127Msg> | undefined, b: BEP127Msg | PlainMessage<BEP127Msg> | undefined): boolean {
    return proto3.util.equals(BEP127Msg, a, b);
  }
}

/**
 * NFT Collection Ownership Resignation Tx
 *
 * @generated from message BEP128MsgOp
 */
export class BEP128MsgOp extends Message<BEP128MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP128MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP128MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP128MsgOp {
    return new BEP128MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP128MsgOp {
    return new BEP128MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP128MsgOp {
    return new BEP128MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP128MsgOp | PlainMessage<BEP128MsgOp> | undefined, b: BEP128MsgOp | PlainMessage<BEP128MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP128MsgOp, a, b);
  }
}

/**
 * @generated from message BEP128Msg
 */
export class BEP128Msg extends Message<BEP128Msg> {
  /**
   * @generated from field: repeated BEP128MsgOp ops = 1;
   */
  ops: BEP128MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP128Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP128Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP128MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP128Msg {
    return new BEP128Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP128Msg {
    return new BEP128Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP128Msg {
    return new BEP128Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP128Msg | PlainMessage<BEP128Msg> | undefined, b: BEP128Msg | PlainMessage<BEP128Msg> | undefined): boolean {
    return proto3.util.equals(BEP128Msg, a, b);
  }
}

/**
 * NFT Collection Permission Grant Tx
 *
 * @generated from message BEP129MsgOp
 */
export class BEP129MsgOp extends Message<BEP129MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string steward = 2;
   */
  steward = "";

  /**
   * @generated from field: repeated uint32 permissions = 3;
   */
  permissions: number[] = [];

  /**
   * @generated from field: optional string memo = 4;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP129MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP129MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "steward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 4, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP129MsgOp {
    return new BEP129MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP129MsgOp {
    return new BEP129MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP129MsgOp {
    return new BEP129MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP129MsgOp | PlainMessage<BEP129MsgOp> | undefined, b: BEP129MsgOp | PlainMessage<BEP129MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP129MsgOp, a, b);
  }
}

/**
 * @generated from message BEP129Msg
 */
export class BEP129Msg extends Message<BEP129Msg> {
  /**
   * @generated from field: repeated BEP129MsgOp ops = 1;
   */
  ops: BEP129MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP129Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP129Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP129MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP129Msg {
    return new BEP129Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP129Msg {
    return new BEP129Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP129Msg {
    return new BEP129Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP129Msg | PlainMessage<BEP129Msg> | undefined, b: BEP129Msg | PlainMessage<BEP129Msg> | undefined): boolean {
    return proto3.util.equals(BEP129Msg, a, b);
  }
}

/**
 * NFT Collection Permission Revocation Tx
 *
 * @generated from message BEP130MsgOp
 */
export class BEP130MsgOp extends Message<BEP130MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string steward = 2;
   */
  steward = "";

  /**
   * @generated from field: repeated uint32 permissions = 3;
   */
  permissions: number[] = [];

  /**
   * @generated from field: optional string memo = 4;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP130MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP130MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "steward", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 4, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP130MsgOp {
    return new BEP130MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP130MsgOp {
    return new BEP130MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP130MsgOp {
    return new BEP130MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP130MsgOp | PlainMessage<BEP130MsgOp> | undefined, b: BEP130MsgOp | PlainMessage<BEP130MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP130MsgOp, a, b);
  }
}

/**
 * @generated from message BEP130Msg
 */
export class BEP130Msg extends Message<BEP130Msg> {
  /**
   * @generated from field: repeated BEP130MsgOp ops = 1;
   */
  ops: BEP130MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP130Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP130Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP130MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP130Msg {
    return new BEP130Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP130Msg {
    return new BEP130Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP130Msg {
    return new BEP130Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP130Msg | PlainMessage<BEP130Msg> | undefined, b: BEP130Msg | PlainMessage<BEP130Msg> | undefined): boolean {
    return proto3.util.equals(BEP130Msg, a, b);
  }
}

/**
 * NFT Mint Tx
 *
 * @generated from message BEP131MsgOp
 */
export class BEP131MsgOp extends Message<BEP131MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP131MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP131MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP131MsgOp {
    return new BEP131MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP131MsgOp {
    return new BEP131MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP131MsgOp {
    return new BEP131MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP131MsgOp | PlainMessage<BEP131MsgOp> | undefined, b: BEP131MsgOp | PlainMessage<BEP131MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP131MsgOp, a, b);
  }
}

/**
 * @generated from message BEP131Msg
 */
export class BEP131Msg extends Message<BEP131Msg> {
  /**
   * @generated from field: repeated BEP131MsgOp ops = 1;
   */
  ops: BEP131MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP131Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP131Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP131MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP131Msg {
    return new BEP131Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP131Msg {
    return new BEP131Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP131Msg {
    return new BEP131Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP131Msg | PlainMessage<BEP131Msg> | undefined, b: BEP131Msg | PlainMessage<BEP131Msg> | undefined): boolean {
    return proto3.util.equals(BEP131Msg, a, b);
  }
}

/**
 * @generated from message BEP131Token
 */
export class BEP131Token extends Message<BEP131Token> {
  /**
   * The unique ID of this NFT
   *
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * The unique hash of this NFT
   *
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * The id of the collection to which this NFT belongs to
   *
   * @generated from field: string collection = 3;
   */
  collection = "";

  /**
   * The id of the collection to which this NFT belongs to
   *
   * @generated from field: string owner = 4;
   */
  owner = "";

  constructor(data?: PartialMessage<BEP131Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP131Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP131Token {
    return new BEP131Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP131Token {
    return new BEP131Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP131Token {
    return new BEP131Token().fromJsonString(jsonString, options);
  }

  static equals(a: BEP131Token | PlainMessage<BEP131Token> | undefined, b: BEP131Token | PlainMessage<BEP131Token> | undefined): boolean {
    return proto3.util.equals(BEP131Token, a, b);
  }
}

/**
 * NFT Transfer Tx
 *
 * @generated from message BEP132MsgOp
 */
export class BEP132MsgOp extends Message<BEP132MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP132MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP132MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP132MsgOp {
    return new BEP132MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP132MsgOp {
    return new BEP132MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP132MsgOp {
    return new BEP132MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP132MsgOp | PlainMessage<BEP132MsgOp> | undefined, b: BEP132MsgOp | PlainMessage<BEP132MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP132MsgOp, a, b);
  }
}

/**
 * @generated from message BEP132Msg
 */
export class BEP132Msg extends Message<BEP132Msg> {
  /**
   * @generated from field: repeated BEP132MsgOp ops = 1;
   */
  ops: BEP132MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP132Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP132Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP132MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP132Msg {
    return new BEP132Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP132Msg {
    return new BEP132Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP132Msg {
    return new BEP132Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP132Msg | PlainMessage<BEP132Msg> | undefined, b: BEP132Msg | PlainMessage<BEP132Msg> | undefined): boolean {
    return proto3.util.equals(BEP132Msg, a, b);
  }
}

/**
 * NFT Burn Tx
 *
 * @generated from message BEP133MsgOp
 */
export class BEP133MsgOp extends Message<BEP133MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP133MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP133MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP133MsgOp {
    return new BEP133MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP133MsgOp {
    return new BEP133MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP133MsgOp {
    return new BEP133MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP133MsgOp | PlainMessage<BEP133MsgOp> | undefined, b: BEP133MsgOp | PlainMessage<BEP133MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP133MsgOp, a, b);
  }
}

/**
 * @generated from message BEP133Msg
 */
export class BEP133Msg extends Message<BEP133Msg> {
  /**
   * @generated from field: repeated BEP133MsgOp ops = 1;
   */
  ops: BEP133MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP133Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP133Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP133MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP133Msg {
    return new BEP133Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP133Msg {
    return new BEP133Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP133Msg {
    return new BEP133Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP133Msg | PlainMessage<BEP133Msg> | undefined, b: BEP133Msg | PlainMessage<BEP133Msg> | undefined): boolean {
    return proto3.util.equals(BEP133Msg, a, b);
  }
}

/**
 * NAT Registration Tx
 *
 * @generated from message BEP134Policy
 */
export class BEP134Policy extends Message<BEP134Policy> {
  /**
   * @generated from field: uint32 type = 1;
   */
  type = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string args = 3;
   */
  args = "";

  constructor(data?: PartialMessage<BEP134Policy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP134Policy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP134Policy {
    return new BEP134Policy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP134Policy {
    return new BEP134Policy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP134Policy {
    return new BEP134Policy().fromJsonString(jsonString, options);
  }

  static equals(a: BEP134Policy | PlainMessage<BEP134Policy> | undefined, b: BEP134Policy | PlainMessage<BEP134Policy> | undefined): boolean {
    return proto3.util.equals(BEP134Policy, a, b);
  }
}

/**
 * @generated from message BEP134Token
 */
export class BEP134Token extends Message<BEP134Token> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string denomination = 3;
   */
  denomination = "";

  /**
   * @generated from field: uint32 decimals = 4;
   */
  decimals = 0;

  /**
   * @generated from field: uint64 initial_supply = 5;
   */
  initialSupply = protoInt64.zero;

  /**
   * @generated from field: repeated BEP134Policy policies = 6;
   */
  policies: BEP134Policy[] = [];

  /**
   * @generated from field: string current_owner = 7;
   */
  currentOwner = "";

  /**
   * @generated from field: string initial_owner = 8;
   */
  initialOwner = "";

  constructor(data?: PartialMessage<BEP134Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP134Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "denomination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "decimals", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "initial_supply", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "policies", kind: "message", T: BEP134Policy, repeated: true },
    { no: 7, name: "current_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "initial_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP134Token {
    return new BEP134Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP134Token {
    return new BEP134Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP134Token {
    return new BEP134Token().fromJsonString(jsonString, options);
  }

  static equals(a: BEP134Token | PlainMessage<BEP134Token> | undefined, b: BEP134Token | PlainMessage<BEP134Token> | undefined): boolean {
    return proto3.util.equals(BEP134Token, a, b);
  }
}

/**
 * @generated from message BEP134MsgOp
 */
export class BEP134MsgOp extends Message<BEP134MsgOp> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string denomination = 2;
   */
  denomination = "";

  /**
   * @generated from field: uint32 decimals = 3;
   */
  decimals = 0;

  /**
   * @generated from field: uint64 initial_supply = 4;
   */
  initialSupply = protoInt64.zero;

  /**
   * @generated from field: repeated BEP134Policy policies = 5;
   */
  policies: BEP134Policy[] = [];

  /**
   * @generated from field: optional string memo = 6;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP134MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP134MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "denomination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "decimals", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "initial_supply", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "policies", kind: "message", T: BEP134Policy, repeated: true },
    { no: 6, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP134MsgOp {
    return new BEP134MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP134MsgOp {
    return new BEP134MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP134MsgOp {
    return new BEP134MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP134MsgOp | PlainMessage<BEP134MsgOp> | undefined, b: BEP134MsgOp | PlainMessage<BEP134MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP134MsgOp, a, b);
  }
}

/**
 * @generated from message BEP134Msg
 */
export class BEP134Msg extends Message<BEP134Msg> {
  /**
   * @generated from field: repeated BEP134MsgOp ops = 1;
   */
  ops: BEP134MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP134Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP134Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP134MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP134Msg {
    return new BEP134Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP134Msg {
    return new BEP134Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP134Msg {
    return new BEP134Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP134Msg | PlainMessage<BEP134Msg> | undefined, b: BEP134Msg | PlainMessage<BEP134Msg> | undefined): boolean {
    return proto3.util.equals(BEP134Msg, a, b);
  }
}

/**
 * NAT Ownership Transfer Tx
 *
 * @generated from message BEP135MsgOp
 */
export class BEP135MsgOp extends Message<BEP135MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP135MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP135MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP135MsgOp {
    return new BEP135MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP135MsgOp {
    return new BEP135MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP135MsgOp {
    return new BEP135MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP135MsgOp | PlainMessage<BEP135MsgOp> | undefined, b: BEP135MsgOp | PlainMessage<BEP135MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP135MsgOp, a, b);
  }
}

/**
 * @generated from message BEP135Msg
 */
export class BEP135Msg extends Message<BEP135Msg> {
  /**
   * @generated from field: repeated BEP135MsgOp ops = 1;
   */
  ops: BEP135MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP135Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP135Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP135MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP135Msg {
    return new BEP135Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP135Msg {
    return new BEP135Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP135Msg {
    return new BEP135Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP135Msg | PlainMessage<BEP135Msg> | undefined, b: BEP135Msg | PlainMessage<BEP135Msg> | undefined): boolean {
    return proto3.util.equals(BEP135Msg, a, b);
  }
}

/**
 * NAT Ownership Resignation Tx
 *
 * @generated from message BEP136MsgOp
 */
export class BEP136MsgOp extends Message<BEP136MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP136MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP136MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP136MsgOp {
    return new BEP136MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP136MsgOp {
    return new BEP136MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP136MsgOp {
    return new BEP136MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP136MsgOp | PlainMessage<BEP136MsgOp> | undefined, b: BEP136MsgOp | PlainMessage<BEP136MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP136MsgOp, a, b);
  }
}

/**
 * @generated from message BEP136Msg
 */
export class BEP136Msg extends Message<BEP136Msg> {
  /**
   * @generated from field: repeated BEP136MsgOp ops = 1;
   */
  ops: BEP136MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP136Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP136Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP136MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP136Msg {
    return new BEP136Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP136Msg {
    return new BEP136Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP136Msg {
    return new BEP136Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP136Msg | PlainMessage<BEP136Msg> | undefined, b: BEP136Msg | PlainMessage<BEP136Msg> | undefined): boolean {
    return proto3.util.equals(BEP136Msg, a, b);
  }
}

/**
 * NAT Mint Tx
 *
 * @generated from message BEP137MsgOp
 */
export class BEP137MsgOp extends Message<BEP137MsgOp> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * @generated from field: uint64 amount = 2;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: optional string memo = 3;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP137MsgOp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP137MsgOp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP137MsgOp {
    return new BEP137MsgOp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP137MsgOp {
    return new BEP137MsgOp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP137MsgOp {
    return new BEP137MsgOp().fromJsonString(jsonString, options);
  }

  static equals(a: BEP137MsgOp | PlainMessage<BEP137MsgOp> | undefined, b: BEP137MsgOp | PlainMessage<BEP137MsgOp> | undefined): boolean {
    return proto3.util.equals(BEP137MsgOp, a, b);
  }
}

/**
 * @generated from message BEP137Msg
 */
export class BEP137Msg extends Message<BEP137Msg> {
  /**
   * @generated from field: repeated BEP137MsgOp ops = 1;
   */
  ops: BEP137MsgOp[] = [];

  /**
   * @generated from field: optional string memo = 2;
   */
  memo?: string;

  constructor(data?: PartialMessage<BEP137Msg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "BEP137Msg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ops", kind: "message", T: BEP137MsgOp, repeated: true },
    { no: 2, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BEP137Msg {
    return new BEP137Msg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BEP137Msg {
    return new BEP137Msg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BEP137Msg {
    return new BEP137Msg().fromJsonString(jsonString, options);
  }

  static equals(a: BEP137Msg | PlainMessage<BEP137Msg> | undefined, b: BEP137Msg | PlainMessage<BEP137Msg> | undefined): boolean {
    return proto3.util.equals(BEP137Msg, a, b);
  }
}

