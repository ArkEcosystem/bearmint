// @generated by protoc-gen-es v0.2.0 with parameter "target=ts"
// @generated from file tendermint/types/canonical.proto (package tendermint.types, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64, Timestamp} from "@bufbuild/protobuf";
import {SignedMsgType} from "./types_pb.js";

/**
 * @generated from message tendermint.types.CanonicalBlockID
 */
export class CanonicalBlockID extends Message<CanonicalBlockID> {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash = new Uint8Array(0);

  /**
   * @generated from field: tendermint.types.CanonicalPartSetHeader part_set_header = 2;
   */
  partSetHeader?: CanonicalPartSetHeader;

  constructor(data?: PartialMessage<CanonicalBlockID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.types.CanonicalBlockID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "part_set_header", kind: "message", T: CanonicalPartSetHeader },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CanonicalBlockID {
    return new CanonicalBlockID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CanonicalBlockID {
    return new CanonicalBlockID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CanonicalBlockID {
    return new CanonicalBlockID().fromJsonString(jsonString, options);
  }

  static equals(a: CanonicalBlockID | PlainMessage<CanonicalBlockID> | undefined, b: CanonicalBlockID | PlainMessage<CanonicalBlockID> | undefined): boolean {
    return proto3.util.equals(CanonicalBlockID, a, b);
  }
}

/**
 * @generated from message tendermint.types.CanonicalPartSetHeader
 */
export class CanonicalPartSetHeader extends Message<CanonicalPartSetHeader> {
  /**
   * @generated from field: uint32 total = 1;
   */
  total = 0;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  constructor(data?: PartialMessage<CanonicalPartSetHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.types.CanonicalPartSetHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CanonicalPartSetHeader {
    return new CanonicalPartSetHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CanonicalPartSetHeader {
    return new CanonicalPartSetHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CanonicalPartSetHeader {
    return new CanonicalPartSetHeader().fromJsonString(jsonString, options);
  }

  static equals(a: CanonicalPartSetHeader | PlainMessage<CanonicalPartSetHeader> | undefined, b: CanonicalPartSetHeader | PlainMessage<CanonicalPartSetHeader> | undefined): boolean {
    return proto3.util.equals(CanonicalPartSetHeader, a, b);
  }
}

/**
 * @generated from message tendermint.types.CanonicalProposal
 */
export class CanonicalProposal extends Message<CanonicalProposal> {
  /**
   * type alias for byte
   *
   * @generated from field: tendermint.types.SignedMsgType type = 1;
   */
  type = SignedMsgType.UNKNOWN;

  /**
   * canonicalization requires fixed size encoding here
   *
   * @generated from field: sfixed64 height = 2;
   */
  height = protoInt64.zero;

  /**
   * canonicalization requires fixed size encoding here
   *
   * @generated from field: sfixed64 round = 3;
   */
  round = protoInt64.zero;

  /**
   * @generated from field: int64 pol_round = 4;
   */
  polRound = protoInt64.zero;

  /**
   * @generated from field: tendermint.types.CanonicalBlockID block_id = 5;
   */
  blockId?: CanonicalBlockID;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string chain_id = 7;
   */
  chainId = "";

  constructor(data?: PartialMessage<CanonicalProposal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.types.CanonicalProposal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 2, name: "height", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */ },
    { no: 3, name: "round", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */ },
    { no: 4, name: "pol_round", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "block_id", kind: "message", T: CanonicalBlockID },
    { no: 6, name: "timestamp", kind: "message", T: Timestamp },
    { no: 7, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CanonicalProposal {
    return new CanonicalProposal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CanonicalProposal {
    return new CanonicalProposal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CanonicalProposal {
    return new CanonicalProposal().fromJsonString(jsonString, options);
  }

  static equals(a: CanonicalProposal | PlainMessage<CanonicalProposal> | undefined, b: CanonicalProposal | PlainMessage<CanonicalProposal> | undefined): boolean {
    return proto3.util.equals(CanonicalProposal, a, b);
  }
}

/**
 * @generated from message tendermint.types.CanonicalVote
 */
export class CanonicalVote extends Message<CanonicalVote> {
  /**
   * type alias for byte
   *
   * @generated from field: tendermint.types.SignedMsgType type = 1;
   */
  type = SignedMsgType.UNKNOWN;

  /**
   * canonicalization requires fixed size encoding here
   *
   * @generated from field: sfixed64 height = 2;
   */
  height = protoInt64.zero;

  /**
   * canonicalization requires fixed size encoding here
   *
   * @generated from field: sfixed64 round = 3;
   */
  round = protoInt64.zero;

  /**
   * @generated from field: tendermint.types.CanonicalBlockID block_id = 4;
   */
  blockId?: CanonicalBlockID;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string chain_id = 6;
   */
  chainId = "";

  constructor(data?: PartialMessage<CanonicalVote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.types.CanonicalVote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(SignedMsgType) },
    { no: 2, name: "height", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */ },
    { no: 3, name: "round", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */ },
    { no: 4, name: "block_id", kind: "message", T: CanonicalBlockID },
    { no: 5, name: "timestamp", kind: "message", T: Timestamp },
    { no: 6, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CanonicalVote {
    return new CanonicalVote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CanonicalVote {
    return new CanonicalVote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CanonicalVote {
    return new CanonicalVote().fromJsonString(jsonString, options);
  }

  static equals(a: CanonicalVote | PlainMessage<CanonicalVote> | undefined, b: CanonicalVote | PlainMessage<CanonicalVote> | undefined): boolean {
    return proto3.util.equals(CanonicalVote, a, b);
  }
}

