// @generated by protoc-gen-es v0.2.1 with parameter "target=ts"
// @generated from file tendermint/consensus/wal.proto (package tendermint.consensus, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Duration, Message, proto3, protoInt64, Timestamp} from "@bufbuild/protobuf";
import {Message as Message$1} from "./types_pb.js";
import {EventDataRoundState} from "../types/events_pb.js";

/**
 * MsgInfo are msgs from the reactor which may update the state
 *
 * @generated from message tendermint.consensus.MsgInfo
 */
export class MsgInfo extends Message<MsgInfo> {
  /**
   * @generated from field: tendermint.consensus.Message msg = 1;
   */
  msg?: Message$1;

  /**
   * @generated from field: string peer_id = 2;
   */
  peerId = "";

  constructor(data?: PartialMessage<MsgInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.MsgInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msg", kind: "message", T: Message$1 },
    { no: 2, name: "peer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInfo {
    return new MsgInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInfo {
    return new MsgInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInfo {
    return new MsgInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInfo | PlainMessage<MsgInfo> | undefined, b: MsgInfo | PlainMessage<MsgInfo> | undefined): boolean {
    return proto3.util.equals(MsgInfo, a, b);
  }
}

/**
 * TimeoutInfo internally generated messages which may update the state
 *
 * @generated from message tendermint.consensus.TimeoutInfo
 */
export class TimeoutInfo extends Message<TimeoutInfo> {
  /**
   * @generated from field: google.protobuf.Duration duration = 1;
   */
  duration?: Duration;

  /**
   * @generated from field: int64 height = 2;
   */
  height = protoInt64.zero;

  /**
   * @generated from field: int32 round = 3;
   */
  round = 0;

  /**
   * @generated from field: uint32 step = 4;
   */
  step = 0;

  constructor(data?: PartialMessage<TimeoutInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.TimeoutInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "duration", kind: "message", T: Duration },
    { no: 2, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "round", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "step", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeoutInfo {
    return new TimeoutInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeoutInfo {
    return new TimeoutInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeoutInfo {
    return new TimeoutInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TimeoutInfo | PlainMessage<TimeoutInfo> | undefined, b: TimeoutInfo | PlainMessage<TimeoutInfo> | undefined): boolean {
    return proto3.util.equals(TimeoutInfo, a, b);
  }
}

/**
 * EndHeight marks the end of the given height inside WAL.
 * @internal used by scripts/wal2json util.
 *
 * @generated from message tendermint.consensus.EndHeight
 */
export class EndHeight extends Message<EndHeight> {
  /**
   * @generated from field: int64 height = 1;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<EndHeight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.EndHeight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndHeight {
    return new EndHeight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndHeight {
    return new EndHeight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndHeight {
    return new EndHeight().fromJsonString(jsonString, options);
  }

  static equals(a: EndHeight | PlainMessage<EndHeight> | undefined, b: EndHeight | PlainMessage<EndHeight> | undefined): boolean {
    return proto3.util.equals(EndHeight, a, b);
  }
}

/**
 * @generated from message tendermint.consensus.WALMessage
 */
export class WALMessage extends Message<WALMessage> {
  /**
   * @generated from oneof tendermint.consensus.WALMessage.sum
   */
  sum: {
    /**
     * @generated from field: tendermint.types.EventDataRoundState event_data_round_state = 1;
     */
    value: EventDataRoundState;
    case: "eventDataRoundState";
  } | {
    /**
     * @generated from field: tendermint.consensus.MsgInfo msg_info = 2;
     */
    value: MsgInfo;
    case: "msgInfo";
  } | {
    /**
     * @generated from field: tendermint.consensus.TimeoutInfo timeout_info = 3;
     */
    value: TimeoutInfo;
    case: "timeoutInfo";
  } | {
    /**
     * @generated from field: tendermint.consensus.EndHeight end_height = 4;
     */
    value: EndHeight;
    case: "endHeight";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WALMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.WALMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_data_round_state", kind: "message", T: EventDataRoundState, oneof: "sum" },
    { no: 2, name: "msg_info", kind: "message", T: MsgInfo, oneof: "sum" },
    { no: 3, name: "timeout_info", kind: "message", T: TimeoutInfo, oneof: "sum" },
    { no: 4, name: "end_height", kind: "message", T: EndHeight, oneof: "sum" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WALMessage {
    return new WALMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WALMessage {
    return new WALMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WALMessage {
    return new WALMessage().fromJsonString(jsonString, options);
  }

  static equals(a: WALMessage | PlainMessage<WALMessage> | undefined, b: WALMessage | PlainMessage<WALMessage> | undefined): boolean {
    return proto3.util.equals(WALMessage, a, b);
  }
}

/**
 * TimedWALMessage wraps WALMessage and adds Time for debugging purposes.
 *
 * @generated from message tendermint.consensus.TimedWALMessage
 */
export class TimedWALMessage extends Message<TimedWALMessage> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: tendermint.consensus.WALMessage msg = 2;
   */
  msg?: WALMessage;

  constructor(data?: PartialMessage<TimedWALMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "tendermint.consensus.TimedWALMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "msg", kind: "message", T: WALMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimedWALMessage {
    return new TimedWALMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimedWALMessage {
    return new TimedWALMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimedWALMessage {
    return new TimedWALMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TimedWALMessage | PlainMessage<TimedWALMessage> | undefined, b: TimedWALMessage | PlainMessage<TimedWALMessage> | undefined): boolean {
    return proto3.util.equals(TimedWALMessage, a, b);
  }
}

